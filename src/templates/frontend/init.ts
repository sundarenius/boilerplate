import { ProjectTypes } from '@/types/types';
import type {
  CompleteData,
  Path,
} from '@/types/frontend-types';
import {
  UserFeedbackOptions,
  Languages,
  CompleteDataKeys,
  FileType,
  Testing,
  AppTypes,
} from '@/types/frontend-types';
import { createProjectStructure } from './create-project';

const getCmpntExt = (isTs:boolean, framework:any) => {
  switch (framework) {
    case ProjectTypes.REACT:
    default:
      return isTs ? '.tsx' : '.jsx';
    case ProjectTypes.VUE:
      return '.vue';
  }
};

type ValidateArr = (
  opt: UserFeedbackOptions,
  data: Partial<CompleteData>,
  key: string,
) => boolean
const validateArr:ValidateArr = (opt, data, key) => {
  const arr = data[opt];
  if (Array.isArray(arr)) {
    return arr.includes(key as never);
  }
  return false;
};

const equalStrings = (a:string, b:string): boolean =>
  a.toLowerCase() === b.toLowerCase();

type GetFolderAndFilesStructure = (data: Partial<CompleteData>) => Path[]
const getFolderAndFilesStructure: GetFolderAndFilesStructure = (data) => {
  const ts = equalStrings(data[UserFeedbackOptions.LANGUAGE] as string, Languages.TYPESCRIPT);
  // if isReact is false, it should be VUE. Currently only supporting those two.
  const isReact = equalStrings(data[CompleteDataKeys.FRAMEWORK] as string, ProjectTypes.REACT);
  const cmpntExt = getCmpntExt(ts, data[CompleteDataKeys.FRAMEWORK]);
  const storeType = isReact ? 'redux' : 'vuex';
  const ext = ts ? '.ts' : '.js';
  const routerFile = isReact ? `Routes${cmpntExt}` : `router${ext}`;
  const router = Boolean(data[UserFeedbackOptions.ROUTING])
    || data[UserFeedbackOptions.APP_TYPE] === AppTypes.SSR;
  const stateManagement = Boolean(data[UserFeedbackOptions.STATE_MANAGEMENT]);

  /*
   * @returns {object} folder and files paths.
   * Root files like .gitignore, package.json etc.. will be generated by shell script later.
   * Files/folders should follow exact order in the tree object. from parent -> child.
   * Add available components conditionally here (loop).
   */

  const paths: Path[] = [
    {
      path: 'src',
      type: FileType.FOLDER,
      if: true,
    },
    {
      path: `src/index${ext}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: `src/App${cmpntExt}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: `src/unit-config${ext}`,
      type: FileType.FILE,
      if: validateArr(
        UserFeedbackOptions.TESTING,
        data,
        Testing.UNIT,
      ),
    },
    {
      path: 'src/docker',
      type: FileType.FOLDER,
      if: Boolean(data[UserFeedbackOptions.INCLUDE_DOCKER]),
    },
    {
      path: 'src/components',
      type: FileType.FOLDER,
      if: true,
    },
    {
      path: `src/components/Menu${ext}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: `src/components/Footer${ext}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: `src/components/Sidebar${ext}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: 'src/pages',
      type: FileType.FOLDER,
      if: router,
    },
    {
      path: 'src/router',
      type: FileType.FOLDER,
      if: router,
    },
    {
      path: `src/router/${routerFile}`,
      type: FileType.FILE,
      if: router,
    },
    {
      path: `src/${storeType}`,
      type: FileType.FOLDER,
      if: stateManagement,
    },
    {
      path: `src/${storeType}/store${ext}`,
      type: FileType.FILE,
      if: stateManagement,
    },
    {
      path: 'src/styles',
      type: FileType.FOLDER,
      if: true,
    },
    {
      path: 'src/types',
      type: FileType.FOLDER,
      if: true,
    },
    {
      path: `src/types/globals${ext}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: 'src/utils',
      type: FileType.FOLDER,
      if: true,
    },
    {
      path: `src/utils/helpers${ext}`,
      type: FileType.FILE,
      if: true,
    },
    {
      path: 'src/e2e',
      type: FileType.FOLDER,
      if: validateArr(
        UserFeedbackOptions.TESTING,
        data,
        Testing.E2E,
      ),
    },
  ];

  // eslint-disable-next-line no-param-reassign
  paths.forEach((val: any) => { val.path = `boilerplate/${val.path}`; });
  // add boilerplate prefix to paths, delete this when done

  return paths;
};

export const initFrontEndTemplate = (data: Partial<CompleteData>) => {
  const folderFilesStructure = getFolderAndFilesStructure(data);
  createProjectStructure(folderFilesStructure);
};
